import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsList, TabsTrigger } from '@/components/ui/tabs';
import Icon from '@/components/ui/icon';

interface SugarCalculatorProps {
  onSave: (data: { type: 'sugar'; value: number; additionalData?: any }) => void;
}

export const SugarCalculator = ({ onSave }: SugarCalculatorProps) => {
  const [level, setLevel] = useState('');
  const [mealTime, setMealTime] = useState('fasting');
  const [result, setResult] = useState<string>('');

  const calculateSugar = () => {
    const sugar = parseFloat(level);
    
    if (sugar > 0) {
      let res = '';
      if (mealTime === 'fasting') {
        if (sugar < 5.6) res = '–ù–æ—Ä–º–∞';
        else if (sugar < 7.0) res = '–ü—Ä–µ–¥–¥–∏–∞–±–µ—Ç';
        else res = '–î–∏–∞–±–µ—Ç';
      } else {
        if (sugar < 7.8) res = '–ù–æ—Ä–º–∞';
        else if (sugar < 11.1) res = '–ü—Ä–µ–¥–¥–∏–∞–±–µ—Ç';
        else res = '–î–∏–∞–±–µ—Ç';
      }
      setResult(res);
      onSave({ type: 'sugar', value: sugar, additionalData: { mealTime, result: res } });
    }
  };

  return (
    <Card className="hover:shadow-xl transition-all duration-300 animate-scale-in border-2 hover:border-yellow-500">
      <CardHeader>
        <div className="w-12 h-12 bg-yellow-500/10 rounded-full flex items-center justify-center mb-3">
          <Icon name="Droplet" className="text-yellow-500" size={24} />
        </div>
        <CardTitle className="font-heading text-2xl">–£—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞</CardTitle>
        <CardDescription>–ö–æ–Ω—Ç—Ä–æ–ª—å –≥–ª—é–∫–æ–∑—ã –≤ –∫—Ä–æ–≤–∏</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div>
          <Label htmlFor="sugar-level">–£—Ä–æ–≤–µ–Ω—å –≥–ª—é–∫–æ–∑—ã (–º–º–æ–ª—å/–ª)</Label>
          <Input
            id="sugar-level"
            type="number"
            step="0.1"
            placeholder="5.5"
            value={level}
            onChange={(e) => setLevel(e.target.value)}
            className="mt-1"
          />
        </div>
        <Tabs value={mealTime} onValueChange={setMealTime} className="w-full">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="fasting">–ù–∞—Ç–æ—â–∞–∫</TabsTrigger>
            <TabsTrigger value="after_meal">–ü–æ—Å–ª–µ –µ–¥—ã</TabsTrigger>
          </TabsList>
        </Tabs>
        <Button onClick={calculateSugar} className="w-full" size="lg">
          <Icon name="Calculator" size={18} className="mr-2" />
          –†–∞—Å—Å—á–∏—Ç–∞—Ç—å
        </Button>
        
        {result && (
          <div className="mt-4 p-4 bg-yellow-500/5 rounded-lg animate-fade-in">
            <div className="text-center mb-3">
              <p className="text-3xl font-bold text-yellow-600 font-heading">
                {level} –º–º–æ–ª—å/–ª
              </p>
              <Badge className="mt-2 bg-yellow-500">
                {result}
              </Badge>
            </div>
            <div className="text-xs text-gray-500 mt-3">
              {mealTime === 'fasting' ? (
                <>
                  <p>‚úì –ù–æ—Ä–º–∞ –Ω–∞—Ç–æ—â–∞–∫: &lt;5.6</p>
                  <p>‚ö† –ü—Ä–µ–¥–¥–∏–∞–±–µ—Ç: 5.6-6.9</p>
                  <p>üö® –î–∏–∞–±–µ—Ç: ‚â•7.0</p>
                </>
              ) : (
                <>
                  <p>‚úì –ù–æ—Ä–º–∞ –ø–æ—Å–ª–µ –µ–¥—ã: &lt;7.8</p>
                  <p>‚ö† –ü—Ä–µ–¥–¥–∏–∞–±–µ—Ç: 7.8-11.0</p>
                  <p>üö® –î–∏–∞–±–µ—Ç: ‚â•11.1</p>
                </>
              )}
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
};
